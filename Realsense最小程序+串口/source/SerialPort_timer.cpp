//////////////////////////////////////////////////////////////////////////
/// COPYRIGHT NOTICE
/// Copyright (c) 2009, 华中科技大学tickTick Group  （版权声明）
/// All rights reserved.
/// 
/// @file    SerialPort.h  
/// @brief   串口通信类头文件
///
/// 本文件完成串口通信类的声明
///
/// @version 1.0   
/// @author  卢俊 
/// @E-mail：lujun.hust@gmail.com
/// @date    2010/03/19
///
///  修订说明：
//////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "SerialPort_timer.h"
#include <process.h>
#include <iostream>
#include "Mmsystem.h"

/** 线程退出标志 */ 
bool CSerialPort::s_bExit = false;
/** 当串口无数据时,sleep至下次查询间隔的时间,单位:秒 */ 
const UINT SLEEP_TIME_INTERVAL = 5;

CSerialPort::CSerialPort(void)
: m_hListenThread(INVALID_HANDLE_VALUE)
{
	m_hComm = INVALID_HANDLE_VALUE;
	m_hListenThread = INVALID_HANDLE_VALUE;

	InitializeCriticalSection(&m_csCommunicationSync);

}

CSerialPort::~CSerialPort(void)
{
	CloseListenTread();
	ClosePort();
	DeleteCriticalSection(&m_csCommunicationSync);
}

bool CSerialPort::InitPort( UINT portNo /*= 1*/,UINT baud /*= CBR_115200*/,char parity /*= 'N'*/,
						    UINT databits /*= 8*/, UINT stopsbits /*= 1*/,DWORD dwCommEvents /*= EV_RXCHAR*/ )
{
	/** 临时变量,将制定参数转化为字符串形式,以构造DCB结构 */ 
	char szDCBparam[50];
	//sprintf_s(szDCBparam, "baud=%d parity=%c data=%d stop=%d", baud, parity, databits, stopsbits);
	sprintf_s(szDCBparam, "baud=%d parity=%c data=%d stop=%d", baud, parity, databits, stopsbits);

	/** 打开指定串口,该函数内部已经有临界区保护,上面请不要加保护 */ 
	if (!openPort(portNo))
	{
		return false;
	}

	/** 进入临界段 */ 
	EnterCriticalSection(&m_csCommunicationSync);

	/** 是否有错误发生 */ 
	BOOL bIsSuccess = TRUE;

    /** 在此可以设置输入输出的缓冲区大小,如果不设置,则系统会设置默认值.
	 *  自己设置缓冲区大小时,要注意设置稍大一些,避免缓冲区溢出
	 */
	if (bIsSuccess )
	{
		bIsSuccess = SetupComm(m_hComm,50,50);
	}

	/** 设置串口的超时时间,均设为0,表示不使用超时限制 */
	COMMTIMEOUTS  CommTimeouts;
	CommTimeouts.ReadIntervalTimeout              = 0;
	CommTimeouts.ReadTotalTimeoutMultiplier  = 0;
	CommTimeouts.ReadTotalTimeoutConstant    = 0;
	CommTimeouts.WriteTotalTimeoutMultiplier = 0;
	CommTimeouts.WriteTotalTimeoutConstant   = 0; 
	if ( bIsSuccess)
	{
		bIsSuccess = SetCommTimeouts(m_hComm, &CommTimeouts);
	}

	DCB  dcb;
	if ( bIsSuccess )
	{
		// 将ANSI字符串转换为UNICODE字符串
		DWORD dwNum = MultiByteToWideChar (CP_ACP, 0, szDCBparam, -1, NULL, 0);
		wchar_t *pwText = new wchar_t[dwNum] ;
		if (!MultiByteToWideChar (CP_ACP, 0, szDCBparam, -1, pwText, dwNum))
		{
			bIsSuccess = TRUE;
		}

		/** 获取当前串口配置参数,并且构造串口DCB参数 */ 
		bIsSuccess = GetCommState(m_hComm, &dcb) && BuildCommDCB(pwText, &dcb) ;
		/** 开启RTS flow控制 */ 
		dcb.fRtsControl = RTS_CONTROL_ENABLE; 

		/** 释放内存空间 */ 
		delete [] pwText;
	}

	if ( bIsSuccess )
	{
		/** 使用DCB参数配置串口状态 */ 
		bIsSuccess = SetCommState(m_hComm, &dcb);
	}
		
	/**  清空串口缓冲区 */
	PurgeComm(m_hComm, PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT);

	/** 离开临界段 */ 
	LeaveCriticalSection(&m_csCommunicationSync);

	return bIsSuccess==TRUE;
}

bool CSerialPort::InitPort( UINT portNo ,const LPDCB& plDCB )
{
	/** 打开指定串口,该函数内部已经有临界区保护,上面请不要加保护 */ 
	if (!openPort(portNo))
	{
		return false;
	}
	
	/** 进入临界段 */ 
	EnterCriticalSection(&m_csCommunicationSync);

	/** 配置串口参数 */ 
	if (!SetCommState(m_hComm, plDCB))
	{
		return false;
	}

	/**  清空串口缓冲区 */
	PurgeComm(m_hComm, PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT);

	/** 离开临界段 */ 
	LeaveCriticalSection(&m_csCommunicationSync);

	return true;
}

void CSerialPort::ClosePort()
{
	/** 如果有串口被打开，关闭它 */
	if( m_hComm != INVALID_HANDLE_VALUE )
	{
		CloseHandle( m_hComm );
		m_hComm = INVALID_HANDLE_VALUE;
	}
}

bool CSerialPort::openPort( UINT portNo )
{
	/** 进入临界段 */ 
	EnterCriticalSection(&m_csCommunicationSync);

	/** 把串口的编号转换为设备名 */ 
    char szPort[50];
	sprintf_s(szPort, "COM%d", portNo);

	/** 打开指定的串口 */ 
	m_hComm = CreateFileA(szPort,		                  /** 设备名,COM1,COM2等 */ 
						 GENERIC_READ | GENERIC_WRITE,  /** 访问模式,可同时读写 */   
						 0,                                                      /** 共享模式,0表示不共享 */ 
					     NULL,					                       		  /** 安全性设置,一般使用NULL */ 
					     OPEN_EXISTING,				              /** 该参数表示设备必须存在,否则创建失败 */ 
						 0,    
						 0);    

	/** 如果打开失败，释放资源并返回 */ 
	if (m_hComm == INVALID_HANDLE_VALUE)
	{
		LeaveCriticalSection(&m_csCommunicationSync);
		return false;
	}

	/** 退出临界区 */ 
	LeaveCriticalSection(&m_csCommunicationSync);

	return true;
}

/**************************************串口收数用参数，必要参数需要extern********************************************/
//常量
int  DATA_NUM  = 6;//8位的数据数量
uchar BAOTOU = 0x33, BAOWEI1 = 0x44, BAOWEI2 = 0x55;
//数据变量
char cRecved = 0x00;
uchar date_receive[10] = { 0 };
int data_index = 0;
int baotou_flag=0;
int usart_get_time_det,usart_get_lst;//两次采集时间差
int usart_get_time_lst,usart_get_time_llst,usart_get_time_this;//此次，上次，上上次时间
//extern
extern int  usart_rt_flag;
extern uchar Flag_Rec_1, Flag_Rec_2, Flag_Rec_3;
extern CSerialPort mySerialPort;

/****************************************开启串口接收定时器中断定时器中断********************************************/
//void WINAPI TimerProc(HWND hWnd,UINT nMsg,UINT nTimerid,DWORD dwTime)
void PASCAL timer_f(UINT wTimerID, UINT msg,DWORD dwUser,DWORD dwl,DWORD dw2)
{
	//记录系统时间
	//SYSTEMTIME time1;
	//GetSystemTime(&time1);
	//int min,ms,second;
	//min = time1.wMinute;
	//second = time1.wSecond;
	//ms = time1.wMilliseconds;
	//打印系统时间
	//fprintf(coordinate_save,"%d\t%d\n",min*60*1000 + second*1000 + ms,data_index);

	 /** 得到本类的指针 */ 
	//CSerialPort *pSerialPort = reinterpret_cast<CSerialPort*>(pParam);
	//线程循环,轮询方式读取串口数据
	//查询缓冲区有多少个字节的数据

	UINT BytesInQue = mySerialPort.GetBytesInCOM();

	if ( BytesInQue == 0 )
	{
		//如果串口输入缓冲区中无数据,则休息一会再查询
		//Sleep(SLEEP_TIME_INTERVAL);
	}
	else 
	{
		//读取输入缓冲区中的数据并输出显示 
		/**********************Do-While主循环********************/
		do
		{
			cRecved = 0x00;
			/**********************收到数据进行处理********************/
			//应该是顺序读取
			if(mySerialPort.ReadChar(cRecved) == true)
			{
				//包头校验，新一次的收数
				if (!baotou_flag)
				{	
					if ((uchar)cRecved == BAOTOU)
						{
							baotou_flag=1;	
						}
					data_index=0;
				}
				//包尾校验，同时代表数据收取完毕
				else if ((uchar)cRecved == BAOWEI2)
				{
					//如果收到正确包尾
					if (date_receive[data_index - 1] == BAOWEI1)
					{
					
						///////目前没有必要////////
						//收数发数不可以同时在函数之中进行，空循环将其隔开
						//while(usart_rt_flag);
						//分割阶段开始标志
						usart_rt_flag=1;

						////收集数据进行处理，传值
						Flag_Rec_1 = date_receive[0];
						Flag_Rec_2 = date_receive[1];
						Flag_Rec_3 = date_receive[2];

						/*cout << "测试成功" << endl;*/
						/////////记录时间/////////
						SYSTEMTIME time1;
						GetSystemTime(&time1);
						int min,ms,second;
						min = time1.wMinute;
						second = time1.wSecond;
						ms = time1.wMilliseconds;
						usart_get_time_llst = usart_get_time_lst;
						usart_get_time_lst = usart_get_time_this;
						usart_get_time_this = min * 60 * 1000 + second * 1000 + ms;
						//计算时间差
						usart_get_lst = usart_get_time_det;
						usart_get_time_det = usart_get_time_this - usart_get_time_lst;

						//flag处理
						baotou_flag=0;
						data_index=0;
						//分割阶段结束
						usart_rt_flag=0;
					}
					//未达到包尾
					else 
					{
						date_receive[data_index]=(unsigned char)cRecved;
						data_index++;
					}
				}//包判断
				//开始收数
				else
				{
					date_receive[data_index]=(uchar)cRecved;
					data_index++;
					if (data_index >= DATA_NUM)
					{
						data_index=0;
						baotou_flag=0;
					}
				};
				//超过数据个数
				if (data_index >= DATA_NUM)
				{
					data_index=0;
					baotou_flag=0;
				}
				
				//std::cout << cRecved ; 
				continue;
			}
		
			if (data_index >= DATA_NUM)
				{
					data_index=0;
					baotou_flag=0;
				}

		}while(--BytesInQue);

		/*********************超过数据个数的判断*******************/
		//再次超位数清零
		if (data_index >= DATA_NUM)
				{
					data_index=0;
					baotou_flag=0;
				}
	}
}

#pragma comment(lib,"Winmm.lib")  
UINT timer_ID;
bool CSerialPort::OpenListenThread()
{
	timer_ID = timeSetEvent (1,1,timer_f,NULL,TIME_PERIODIC);//中断产生
	/** 检测线程是否已经开启了 */ 
	//if (m_hListenThread != INVALID_HANDLE_VALUE)
	{
		/** 线程已经开启 */ 
	//	return false;
	}

	//s_bExit = false;
	/** 线程ID */ 
	//UINT threadId;
	/** 开启串口数据监听线程 */ 
	/*m_hListenThread = (HANDLE)_beginthreadex(NULL, 0, ListenThread, this, 0, &threadId);
	if (!m_hListenThread)
	{
		return false;
	}*/
	/** 设置线程的优先级,高于普通线程 */ 
	/*if (!SetThreadPriority(m_hListenThread, THREAD_PRIORITY_ABOVE_NORMAL))
	{
		return false;
	}*/
	
	//SetTimer(NULL,0,2/*一m秒*/,TimerProc/*传递回调函数指针*/);
	return true;

	  ;

}

bool CSerialPort::CloseListenTread()
{	
	if (m_hListenThread != INVALID_HANDLE_VALUE)
	{
		/** 通知线程退出 */ 
		s_bExit = true;

		/** 等待线程退出 */ 
		Sleep(10);

		/** 置线程句柄无效 */ 
		CloseHandle( m_hListenThread );
		m_hListenThread = INVALID_HANDLE_VALUE;
	}
	return true;
}

UINT CSerialPort::GetBytesInCOM()
{
	DWORD dwError = 0;	/** 错误码 */ 
	COMSTAT  comstat;   /** COMSTAT结构体,记录通信设备的状态信息 */ 
	memset(&comstat, 0, sizeof(COMSTAT));

	UINT BytesInQue = 0;
	/** 在调用ReadFile和WriteFile之前,通过本函数清除以前遗留的错误标志 */ 
	if ( ClearCommError(m_hComm, &dwError, &comstat) )
	{
		BytesInQue = comstat.cbInQue; /** 获取在输入缓冲区中的字节数 */ 
	}

	return BytesInQue;
}

bool CSerialPort::ReadChar( char &cRecved )
{
	BOOL  bResult     = TRUE;
	DWORD BytesRead   = 0;
	if(m_hComm == INVALID_HANDLE_VALUE)
	{
		return false;
	}

	/** 临界区保护 */ 
	EnterCriticalSection(&m_csCommunicationSync);

	/** 从缓冲区读取一个字节的数据 */ 
	bResult = ReadFile(m_hComm, &cRecved, 1, &BytesRead, NULL);
	if ((!bResult))
	{ 
		/** 获取错误码,可以根据该错误码查出错误原因 */ 
		DWORD dwError = GetLastError();

		/** 清空串口缓冲区 */ 
		PurgeComm(m_hComm, PURGE_RXCLEAR | PURGE_RXABORT);
		LeaveCriticalSection(&m_csCommunicationSync);

		return false;
	}

	/** 离开临界区 */ 
	LeaveCriticalSection(&m_csCommunicationSync);

	return (BytesRead == 1);

}

bool CSerialPort::WriteData( unsigned char* pData, unsigned int length )
{
	BOOL   bResult     = TRUE;
	DWORD  BytesToSend = 0;
	if(m_hComm == INVALID_HANDLE_VALUE)
	{
		return false;
	}

	/** 临界区保护 */ 
	EnterCriticalSection(&m_csCommunicationSync);

	/** 向缓冲区写入指定量的数据 */ 
	bResult = WriteFile(m_hComm, pData, length, &BytesToSend, NULL);
	if (!bResult)  
	{
		DWORD dwError = GetLastError();
		/** 清空串口缓冲区 */ 
		PurgeComm(m_hComm, PURGE_RXCLEAR | PURGE_RXABORT);
		LeaveCriticalSection(&m_csCommunicationSync);

		return false;
	}

	/** 离开临界区 */ 
	LeaveCriticalSection(&m_csCommunicationSync);

	return true;
}


